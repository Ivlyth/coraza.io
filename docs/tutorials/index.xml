<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on</title><link>https://coraza.io/docs/tutorials/</link><description>Recent content in Tutorials on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://coraza.io/docs/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://coraza.io/docs/tutorials/introduction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/tutorials/introduction/</guid><description>Prerequisites Linux distribution (Debian and Centos are recommended, Windows is not supported yet) Golang compiler v1.16 or v1.17 Optional requirements In this Coraza version, you can set CGO_ENABLED to 1 or 0, if you set it to 1, you will be required to link libinjection and libpcre to enable PCRE expressions, @detectSQLi and @detectXSS, if you set it to 0 you won&amp;rsquo;t need any dynamic library but your implementation won&amp;rsquo;t support @detectSQLi, @detectXSS nor PCRE expressions, which means OWASP CRS won&amp;rsquo;t work.</description></item><item><title>Quick Start</title><link>https://coraza.io/docs/tutorials/quick-start/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/tutorials/quick-start/</guid><description>If you are not looking to use Coraza WAF as a library and you want a working WAF implementation or integration, check &amp;hellip;
Requirements Download and install Libinjection Install libpcre (apt install libpcre++-dev for ubuntu) Golang 1.16+ You can use the coraza-waf Docker image to develop and build you projects.
Add Coraza to your go project go get github.com/jptosso/coraza-waf@latest Create a WAF instance WAF instances are the main container for settings and rules which are inherited by transactions that will process requests, responses and logging.</description></item><item><title>Virtual Patching</title><link>https://coraza.io/docs/tutorials/virtualpatching/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/tutorials/virtualpatching/</guid><description>Comming soon</description></item><item><title>OWASP Core Ruleset</title><link>https://coraza.io/docs/tutorials/coreruleset/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://coraza.io/docs/tutorials/coreruleset/</guid><description>Important: OWASP Core Ruleset requires libinjection and libpcre, hence CGO_ENABLED=1.
Installation Configuration Important considerations Coraza WAF on based in ModSecurity but is taking a different way, we are working hard with the Core Ruleset project to keep compatibility simple but there are some tweaks that has to be made in order to use CRS.
Compatibility issues Coraza WAF implementations are different from Nginx and Apache. Some rules are designed to fix issues releated to the web server and might not be compatible with Coraza.</description></item><item><title>Installing libinjection &amp; libpcre</title><link>https://coraza.io/docs/tutorials/dependencies/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/tutorials/dependencies/</guid><description>Coraza requires two C libraries in order to work, libinjection is used to perform @isSQLi and @isXSS, and libpcre is used to perform @rx.
Future versions of Coraza won´t require these dependencies, in order to replace libpcre with golang´s RE2 compiler, rules using pcre compatible expresions must migrate to RE2 standard. Libinjection is being replaced by a golang port, follow the development in this repository.
Install libpcre Debian/Ubuntu:
apt install -y libpcre++-dev Centos/Rhel:</description></item><item><title>Continuous Delivery</title><link>https://coraza.io/docs/tutorials/devsecops/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/tutorials/devsecops/</guid><description>Comming soon&amp;hellip;</description></item></channel></rss>