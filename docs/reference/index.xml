<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on</title><link>https://coraza.io/docs/reference/</link><description>Recent content in Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://coraza.io/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging</title><link>https://coraza.io/docs/reference/logging/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/logging/</guid><description>Logging Engines All loggers are configured using the SecAuditLog directive, you can use as many loggers as you want. You can get or create additional loggers using plugins.
# syntax is: SecAuditLog ENGINE [keyvalue options] SecAuditLog engine_name \ format=json \ some_variable=some_value \ more_setup=with_values # or simply one line SecAuditLog engine_name format=json some_variable=some_value Important: Keep in mind using many loggers will lock the current routine and slow down your webserver.</description></item><item><title>Internals</title><link>https://coraza.io/docs/reference/internals/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/internals/</guid><description>WAF Engine Waf is the main interface used to store settings, rules and create transactions, most directives will set variables for Waf instances. A coraza implementation might have unlimited Waf instances and each Waf might process unlimited transactions.
Transactions Transactions are an instance of an url call for a Waf instance, transactions are created with wafinstance.NewTransaction(). Transactions holds collections and configurations that may be updated using rules.
Macro Expansion Macro expansions are a function available for transactions, a macro expansion will compile a string and provide variables data to the current context.</description></item><item><title>Roadmap</title><link>https://coraza.io/docs/reference/roadmap/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/roadmap/</guid><description/></item><item><title>Benchmarks</title><link>https://coraza.io/docs/reference/benchmarks/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/benchmarks/</guid><description>Results 1. Without rules GET 2. Without rules POST Multipart 3. Without rules POST XML 4. With CRS GET 5. With CRS POST Multipart 6. With CRS POST XML Methodology Run your own benchmarks First make sure you meet all the requirements:
golang 1.16+ libpcre and libinjection installed gcc compiler libinjection installed python 3 git clone https://github.com/jptosso/coraza-benchmark --depth=1 cd coraza-benchmark make all ./run-benchmarks.sh ./parse-results.sh This will print the tables with the benchmark results.</description></item><item><title>Extending</title><link>https://coraza.io/docs/reference/extending/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/extending/</guid><description>Rule Operators: Create rule operators like @even to detect even numbers Rule Transformations: Create rule transformations like t:rot13 to encode your values in ROT13 Rule Actions: Create rule actions like challenge to redirect a malicious request to some bot detection system The plugin interface provides three functions to extend rule operators, transformations and actions. Each one of them must match it&amp;rsquo;s proper type or interface and be registered using the plugins package.</description></item></channel></rss>