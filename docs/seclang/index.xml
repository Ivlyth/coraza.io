<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Seclang on</title><link>https://coraza.io/docs/seclang/</link><description>Recent content in Seclang on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://coraza.io/docs/seclang/index.xml" rel="self" type="application/rss+xml"/><item><title>Directives</title><link>https://coraza.io/docs/seclang/directives/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/</guid><description>If you are looking to extend OWASP Core Ruleset, check this article.
Note : It is highly encouraged that you do not edit the Core rules files themselves but rather place all changes (such as SecRuleRemoveByID, etc&amp;hellip;) in your custom rules file. This will allow for easier upgrading as newer Core rules are released.
SecAction Description: Unconditionally processes the action list it receives as the first and only parameter. The syntax of the parameter is identical to that of the third parameter of SecRule.</description></item><item><title>Actions</title><link>https://coraza.io/docs/seclang/actions/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/actions/</guid><description>Each action belongs to one of five groups:
Disruptive actions - Cause Coraza to do something. In many cases something means block transaction, but not in all. For example, the allow action is classified as a disruptive action, but it does the opposite of blocking. There can only be one disruptive action per rule (if there are multiple disruptive actions present, or inherited, only the last one will take effect), or rule chain (in a chain, a disruptive action can only appear in the first rule).</description></item><item><title>Execution flow</title><link>https://coraza.io/docs/seclang/execution-flow/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/execution-flow/</guid><description>Phases Phases are an abstract concept designed to fit most web servers execution flows and give it more oportunities to stop a request.
Phase 1: Request Headers This phase will process rules with the following variables:
HTTP connection data, like IPs, ports and protocol version URI and GET arguments Request Headers: cookies, content-type and content-length Phase 2: Request Body This phase will process rules with the following variables:</description></item><item><title>Operators</title><link>https://coraza.io/docs/seclang/operators/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/operators/</guid><description>This section documents the operators currently available in Coraza.
beginsWith Description: Returns true if the parameter string is found at the beginning of the input. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect request line that does not begin with &amp;quot;GET&amp;quot; SecRule REQUEST_LINE &amp;quot;!@beginsWith GET&amp;quot; &amp;quot;id:149&amp;quot; contains Description: Returns true if the parameter string is found anywhere in the input. Macro expansion is performed on the parameter string before comparison.</description></item><item><title>Syntax</title><link>https://coraza.io/docs/seclang/syntax/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/syntax/</guid><description>Seclang is a language created by Modsecurity to define a list of sequential directives
SecDirective1 some options SecDirective2 &amp;quot;some option between brackets \&amp;quot; and escaped&amp;quot; SecSampleDirective this \ directive \ is splitted \ in lines Rule syntax Rules are a special directive that must contain variables, operator and actions: SecRule VARIABLES &amp;quot;@OPERATOR OPERATOR_ARGUMENTS&amp;quot; &amp;quot;ACTIONS&amp;quot;.
All rules must have a unique ID action, for example &amp;quot;id:1&amp;quot;. If there is no phase action, the phase will default to 2 (request headers).</description></item><item><title>Transformations</title><link>https://coraza.io/docs/seclang/transformations/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/transformations/</guid><description>Transformation functions are used to alter input data before it is used in matching (i.e., operator execution). The input data is never modified, actuallyâ€”whenever you request a transformation function to be used, Coraza will create a copy of the data, transform it, and then run the operator against the result.
In the following example, the request parameter values are converted to lowercase before matching:
SecRule ARGS &amp;quot;xp_cmdshell&amp;quot; &amp;quot;t:lowercase,id:91&amp;quot; Multiple transformation actions can be used in the same rule, forming a transformation pipeline.</description></item></channel></rss>