<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Integrations on</title><link>https://coraza.io/docs/integrations/</link><description>Recent content in Integrations on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://coraza.io/docs/integrations/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Cases</title><link>https://coraza.io/docs/integrations/usecases/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/integrations/usecases/</guid><description>Reverse Proxy Coraza can be used as a reverse proxy to intercept requests to audit and deny attacks.
Current Reverse Proxy Implementations:
Caddy Yaegi (Comming soon) Application Server FastCGI is a binary protocol for interfacing interactive programs with a web server.
Languages supporting FastCGI API: Ada, Delphi, Lazarus Free Pascal, C, C++, Chicken Scheme, Common Lisp, D, Eiffel, Erlang, GnuCOBOL, Go, Guile Scheme, Haskell, VSI BASIC for OpenVMS, Java, Lua, node.</description></item><item><title>Docker</title><link>https://coraza.io/docs/integrations/docker/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/integrations/docker/</guid><description>By default each image is powered by Caddy, future versions may use different implementations like jptosso/coraza-waf@1.0.0-caddy or jptosso/coraza-waf@1.0.0-traefik.
Hosting some simple static server $ docker run --name my-waf -p 8080:8080 -v /path/to/config:/coraza:ro -d jptosso/coraza-caddy Alternatively, a simple Dockerfile can be used to generate a new image that includes the necessary content (which is a much cleaner solution than the bind mount above):
FROM jptosso/coraza-caddy COPY static-settings-directory /coraza Place this file in the same directory as your directory of content (&amp;ldquo;static-settings-directory&amp;rdquo;), run docker build -t my-waf .</description></item><item><title>Kubernetes Ingress</title><link>https://coraza.io/docs/integrations/kubernetes/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/integrations/kubernetes/</guid><description/></item><item><title>Traefik</title><link>https://coraza.io/docs/integrations/traefik/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/integrations/traefik/</guid><description>Important: Coraza Traefik plugin is a draft and it&amp;rsquo;s under development. Please send us your feedback!
Important 2: Coraza Traefik Plugin does not support CGO, hence it does not support OWASP CRS.
To learn how to use this plugin go to https://pilot.traefik.io/plugins and select install.
Configuration directives directives: Write your Coraza rules as a string or multilien string. include:: Include a file containing Coraza rules, supports wildcards (*).</description></item><item><title>Caddy Server</title><link>https://coraza.io/docs/integrations/caddy/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://coraza.io/docs/integrations/caddy/</guid><description>Caddy with Coraza supports autotls (with letÂ´s encrypt), FastCGI, content rendering and reverse proxy.
Installing Building dependencies Install golang 1.16 or 1.17.
Using go install go install github.com/jptosso/coraza-caddy/caddy@latest Downloading pre-compiled version from Caddy Go to https://caddyserver.com/download, select your platform, select Coraza-Waf and select Download.
Using the package installer Debian/Ubuntu:
Centos/Rhel:
Building from source git clone https://github.com/jptosso/coraza-caddy cd coraza-caddy go get ./... go build -o caddy caddy/main.go Building with XCaddy go install github.</description></item><item><title>Gin</title><link>https://coraza.io/docs/integrations/gin/</link><pubDate>Sun, 05 Sep 2021 14:03:09 -0300</pubDate><guid>https://coraza.io/docs/integrations/gin/</guid><description>Installing Import the middleware using:
go get github.com/jptosso/coraza-gin Using the middleware Add the middleware to your code:
import( //... &amp;quot;github.com/jptosso/coraza-waf&amp;quot; &amp;quot;github.com/jptosso/coraza-waf/seclang&amp;quot; corazagin&amp;quot;github.com/jptosso/coraza-gin&amp;quot; ) func main() { // Creates a router without any middleware by default r := gin.New() waf := coraza.NewWaf() // Add some rules... // Use the Coraza Gin Middleware r.Use(corazagin.Coraza(waf)) // Per route middleware, you can add as many as you desire. r.GET(&amp;quot;/mypath&amp;quot;, MyFunction(), Endpoint) // Listen and serve on 0.</description></item><item><title>haproxy</title><link>https://coraza.io/docs/integrations/haproxy/</link><pubDate>Sun, 05 Sep 2021 14:03:09 -0300</pubDate><guid>https://coraza.io/docs/integrations/haproxy/</guid><description>WORK IN PROGRESS, APIs and configurations might change
HAProxy supports a custom offloading engine called SPOE and it can be used to redirect requests and responses to Coraza and generate disruptive actions.
Installing the Coraza Agent for SPOE Method 1: go install go install github.com/jptosso/coraza-server/cmd/coraza-server@master wget https://github.com/jptosso/coraza-server/blob/master/config.sample.yml -o config.yml Method 2: Docker docker run -p 9000:9000 jptosso/coraza-server You might replace the config yml with -v ./path/to/localconfig.yml:/coraza/config.yml
Creating a WAF instance Each waf instance must be created using different ports, currently, only the following configuration fields are available:</description></item></channel></rss>